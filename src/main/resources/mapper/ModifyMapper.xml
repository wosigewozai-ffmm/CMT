<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seu.CMT.mapper.ModifyMapper">

    <!-- 自定义结果集-->
    <resultMap id="relationMap" type="com.seu.CMT.pojo.Relation">
        <result property="nameA" column="nameA"/>
        <result property="relation" column="relation"/>
        <result property="nameB" column="nameB"/>
        <result property="nameA_old" column="nameA_old"/>
        <result property="relation_old" column="relation_old"/>
        <result property="nameB_old" column="nameB_old"/>
        <result property="ties" column="ties"/>
        <collection property="resultRelations" ofType="com.seu.CMT.pojo.Relation">
            <result property="nameA" column="nameA1"/>
            <result property="relation" column="relation1"/>
            <result property="nameB" column="nameB1"/>
            <result property="nameA_old" column="nameA_old1"/>
            <result property="relation_old" column="relation_old1"/>
            <result property="nameB_old" column="nameB_old1"/>
            <result property="ties" column="ties1"/>
        </collection>
    </resultMap>

    <resultMap id="resultMap" type="com.seu.CMT.pojo.Model">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="type" column="type"/>
        <collection property="resultModels" ofType="com.seu.CMT.pojo.Model">
            <id property="id" column="id1"/>
            <result property="name" column="name1"/>
            <result property="type" column="type1"/>
        </collection>
    </resultMap>

    <select id="getAll" resultMap="resultMap">
        match
        (u:Model)
        where u.type = #{type}
        return
        id(u) as id,u.name as name,u.type as type
    </select>

    <select id="find" resultMap="resultMap">
        match
        (u:Model)
        where u.name = #{name}
        return
        u.name as name, u.type as type
    </select>

    <select id="findRelation" resultMap="resultMap">
        MATCH (m:Model { name:#{relation.nameA}})
        MATCH (n:Model { name:#{relation.nameB}})
        MATCH (m)-[:${relation.relation}]->(n)
        return n,m
    </select>

    <!--create(u:user{name:'aaa'}) - [l:like] -> (u1:user{name:'bbb'}) - [l1:like] -> (u2:user{name:'ccc'})-->
    <insert id="add">
        create(u:Model{name:#{model.name},type:#{model.type},effect:#{model.effect},prescription:#{model.prescription},herb:#{model.herb},symptom:#{model.symptom},function_large:#{model.function_large},function_small:#{model.function_small}})
    </insert>

    <insert id="addRelation">
        match (n:Model{name:#{relation.nameA}}) , (m:Model{name:#{relation.nameB}} )
        create  (n) - [${relation.relation}:${relation.relation}{name:"${relation.relation}"}] -> (m)
    </insert>

    <insert id="addStrengthRelation">
        match (n:Model{name:#{relation.nameA}}) , (m:Model{name:#{relation.nameB}} )
        create  (n) - [${relation.relation}:${relation.relation}{name:"ties",ties: 1 }] -> (m)
    </insert>

    <delete id="deleteEntity">
        MATCH (n:Model{name:#{model.name}}) DETACH DELETE n
    </delete>

    <delete id="deleteRelation">
        match p=(x)-[r]->(y) where x.name=#{relation.nameA} and y.name=#{relation.nameB} and r.name="${relation.relation}"
        delete r
    </delete>

    <delete id="deleteOldRelation">
        match p=(x)-[r]->(y) where x.name=#{relation.nameA_old} and y.name=#{relation.nameB_old} and r.name="${relation.relation}"
        delete r
    </delete>

    <select id="findEntityRelation" resultMap="relationMap">
        match p=(x)-[r]->(y) where (x.name="${model.name}" or y.name="${model.name}") and (r.name <!CDATA[<>]]> "ties")
        return x.name as nameA, r.name as relation, y.name as nameB
    </select>

    <select id="findRelationRelation" resultMap="relationMap">
        match p=(x)-[r]->(y) where r.name=#{relation.relation}
        return x.name as nameA, r.name as relation, y.name as nameB
    </select>

    <select id="findStrengthRelation" resultMap="relationMap">
        match p=(x)-[r]->(y) where x.name="${relation.nameA}" and y.name="${relation.nameB}"  and r.name="ties"
        return x.name as nameA, r.name as relation, y.name as nameB, r.ties as ties
    </select>

    <update id="updateEntity">
        match (u:Model)
        where u.name = #{model.name}
        set u.name = #{model.name},u.type = #{model.type}
    </update>

    <update id="updateRelation">
        match p=(x)-[r]->(y) where x.name="${relation.nameA}" and y.name="${relation.nameB}" and r.name="${relation.relation_old}"
        set r.name = "${relation.relation}"
    </update>

    <update id="updateStrengthRelation">
        match p=(x)-[r]->(y) where x.name="${relation.nameA}" and y.name="${relation.nameB}" and r.name = "ties"
        set r.ties = ${relation.ties}
    </update>

    <insert id="addExcelEntity">
        LOAD CSV WITH HEADERS FROM "file:///${fileName}" as row
        CREATE(u:Model{name:row.name, type:row.type,effect:row.effect,prescription:row.prescription,herb:row.herb,symptom:row.symptom,function_large:row.function_large,function_small:row.function_small})
    </insert>

    <insert id="addExcelRelation">
        LOAD CSV WITH HEADERS FROM "file:///${fileName}" as row
        MATCH (n:Model{name:row.nameA})
        MATCH (m:Model{name:row.nameB})
        MERGE (n)-[${relation}:${relation}{name:"${relation}"}  ]->(m)
    </insert>
</mapper>